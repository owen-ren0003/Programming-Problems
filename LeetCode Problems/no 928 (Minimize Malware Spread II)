class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        Set<Integer> nodes = new HashSet<>();
        int m= initial.length;
        for (int i=0; i<m; i++) nodes.add(initial[i]);
        
        List<Integer> order = new ArrayList<>(nodes);
        Collections.sort(order);
        
        int n=graph.length;
        int idx = order.get(0);
        int min = Integer.MAX_VALUE;
        for (int ig: order){
            boolean[] vsd = new boolean[n];
            int sum =0;
            for (int j : order){
                if (j!=ig && vsd[j]==false)
                    sum+= dfs(graph, ig, j, vsd);
            }
            if (min>sum){
                min = sum;
                idx = ig;
            }
        }
        return idx;
    }
    
    //computes M(initial) by deleting node ignore.
    private int dfs(int[][] graph, int ignore, int node, boolean[] vsd){
        int n = graph.length;
        int ret = 1;
        vsd[node] = true;
        for (int i=0; i<n; i++){
            if (i!= ignore && graph[node][i] == 1 && vsd[i]==false){
                ret+= dfs(graph, ignore, i, vsd);
            }
        }
        return ret;
    }
}
